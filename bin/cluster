#!/usr/bin/env node

/**
 * Module dependencies.
 */

require('dotenv').config();

var app = require('../app');
var debug = require('debug')('nodeapi:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

//Control de cluster
const cluster = require('cluster');

//si somos master, creamos clones de nuestro proceso
if (cluster.isMaster){

  cluster.on('listening', (worker, address )=>{
    console.log(`Worker ${worker.id} whit pid ${worker.process.pid} is now conected to port ${address.port}`)
    worker.on('messsage', (message) =>{
      console.log('Mensaje recibido en el master desde un worker:', message)
    })
  });

  cluster.on('exit', (worker, code, signal) => {
    if (signal){
      console.log(`worker ${worker.process.pid} was killed by signal: ${signal}.`)
    } else if(code !==0){
      console.log(`worker ${worker.process.pid} was killed by code: ${code}.`)
    } else{
      console.log(`worker ${worker.process.pid} success!`)
    }

    console.log('Starting a new Worker');
    cluster.fork();
      
  });

  const numCPUs = require ('os').cpus().length;
  console.log(`Starting cluster for ${numCPUs} cores...`)

  for(let i = 0; i <numCPUs; i++){
    cluster.fork();
  }

} else {

  //Start of a cluster fork

      /**
       * Create HTTP server.
       */

      var server = http.createServer(app);

      /**
       * Listen on provided port, on all network interfaces.
       */

      server.listen(port);
      server.on('error', onError);
      server.on('listening', onListening);

}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
